import logging
import json
import os
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# --- –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ---
# –ë–µ—Ä–µ–º–æ —Ç–æ–∫–µ–Ω —Ç–∞ ID –≥—Ä—É–ø–∏ –∑—ñ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ (—Ü–µ –±–µ–∑–ø–µ—á–Ω—ñ—à–µ)
TOKEN = os.getenv("TELEGRAM_TOKEN")
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID", -1001234567890)) # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - –ø—Ä–∏–∫–ª–∞–¥

REPORT_HOUR = int(os.getenv("REPORT_HOUR", 21))  # –ì–æ–¥–∏–Ω–∞ –¥–ª—è –∑–≤—ñ—Ç—É (21:00)
WEEKLY_REPORT_DAY = os.getenv("WEEKLY_REPORT_DAY", 'sun') # –Ω–µ–¥—ñ–ª—è

# –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –¥–∞–Ω–∏—Ö. –Ø–∫—â–æ –∑–º—ñ–Ω–Ω–∞ DATA_PATH –Ω–µ –∑–∞–¥–∞–Ω–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –ø–∞–ø–∫—É.
DATA_DIR = os.getenv("DATA_PATH", ".")
DATA_FILE = os.path.join(DATA_DIR, "user_data.json")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∑–∞–¥–∞–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ
if not TOKEN:
    raise ValueError("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ TELEGRAM_TOKEN!")
if not GROUP_CHAT_ID:
    raise ValueError("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ GROUP_CHAT_ID!")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


# --- –§–£–ù–ö–¶–Ü–á –î–õ–Ø –†–û–ë–û–¢–ò –ó –î–ê–ù–ò–ú–ò ---
def load_data():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Ñ–∞–π–ª—É."""
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        # –Ø–∫—â–æ —Ñ–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π, —Å—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É (—è–∫—â–æ —Ç—Ä–µ–±–∞) —ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        os.makedirs(DATA_DIR, exist_ok=True)
        return {"daily": {}, "weekly": {}}

def save_data(data):
    """–ó–±–µ—Ä—ñ–≥–∞—î –¥–∞–Ω—ñ —É —Ñ–∞–π–ª."""
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=4, ensure_ascii=False)


# --- –û–°–ù–û–í–ù–ê –õ–û–ì–Ü–ö–ê –ë–û–¢–ê (–∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω) ---

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = update.message
    if not message or not message.text or '+' not in message.text:
        return

    user = message.from_user
    user_id = str(user.id)
    user_name = user.full_name

    data = load_data()
    
    # –û–Ω–æ–≤–ª—é—î–º–æ —â–æ–¥–µ–Ω–Ω–∏–π –ª—ñ—á–∏–ª—å–Ω–∏–∫
    daily_stats = data.get("daily", {})
    daily_stats.setdefault(user_id, {"name": user_name, "count": 0})
    daily_stats[user_id]["name"] = user_name
    daily_stats[user_id]["count"] += message.text.count('+')
    data["daily"] = daily_stats

    # –û–Ω–æ–≤–ª—é—î–º–æ —Ç–∏–∂–Ω–µ–≤–∏–π –ª—ñ—á–∏–ª—å–Ω–∏–∫
    weekly_stats = data.get("weekly", {})
    weekly_stats.setdefault(user_id, {"name": user_name, "count": 0})
    weekly_stats[user_id]["name"] = user_name
    weekly_stats[user_id]["count"] += message.text.count('+')
    data["weekly"] = weekly_stats

    save_data(data)
    logger.info(f"User {user_name} added a plus. Daily: {data['daily'].get(user_id, {}).get('count', 0)}, Weekly: {data['weekly'].get(user_id, {}).get('count', 0)}")


async def send_daily_report(context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    daily_stats = data.get("daily", {})
    if not daily_stats:
        report_text = "‚ú® **–©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç** ‚ú®\n\n–ó–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –Ω—ñ—Ö—Ç–æ –Ω–µ —Å—Ç–∞–≤–∏–≤ –ø–ª—é—Å–∏."
    else:
        report_text = "‚ú® **–©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç –ø–æ –ø–ª—é—Å–∞—Ö** ‚ú®\n\n"
        total_pluses = 0
        sorted_users = sorted(daily_stats.items(), key=lambda item: item[1]['count'], reverse=True)
        for user_id, user_data in sorted_users:
            report_text += f"‚ñ™Ô∏è {user_data['name']}: **{user_data['count']}**\n"
            total_pluses += user_data['count']
        report_text += f"\n**–í—Å—å–æ–≥–æ –∑–∞ –¥–µ–Ω—å:** {total_pluses}"

    await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=report_text, parse_mode='Markdown')
    logger.info("Daily report sent.")
    
    data["daily"] = {}
    save_data(data)

async def send_weekly_report(context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    weekly_stats = data.get("weekly", {})
    if not weekly_stats:
        report_text = "üóìÔ∏è **–¢–∏–∂–Ω–µ–≤–∏–π –∑–≤—ñ—Ç** üóìÔ∏è\n\n–ó–∞ –≤–µ—Å—å —Ç–∏–∂–¥–µ–Ω—å –ø–ª—é—Å–∏–∫—ñ–≤ –Ω–µ –±—É–ª–æ."
    else:
        report_text = "üóìÔ∏è **–í–µ–ª–∏–∫–∏–π —Ç–∏–∂–Ω–µ–≤–∏–π –∑–≤—ñ—Ç!** üóìÔ∏è\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–∞ –≤–µ—Å—å —Ç–∏–∂–¥–µ–Ω—å:\n"
        total_pluses = 0
        sorted_users = sorted(weekly_stats.items(), key=lambda item: item[1]['count'], reverse=True)
        for user_id, user_data in sorted_users:
            report_text += f"üèÜ {user_data['name']}: **{user_data['count']}**\n"
            total_pluses += user_data['count']
        report_text += f"\n**–ó–∞–≥–∞–ª–æ–º –∑–∞ —Ç–∏–∂–¥–µ–Ω—å:** {total_pluses}!"
        report_text += "\n\n–ü–æ—á–∏–Ω–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–∏–∂–¥–µ–Ω—å! –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±–Ω—É–ª–µ–Ω–æ."
        
    await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=report_text, parse_mode='Markdown')
    logger.info("Weekly report sent.")

    data["daily"] = {}
    data["weekly"] = {}
    save_data(data)


def main() -> None:
    application = Application.builder().token(TOKEN).build()
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.ChatType.GROUPS, handle_message))

    scheduler = AsyncIOScheduler(timezone="Europe/Kiev")
    scheduler.add_job(send_daily_report, 'cron', hour=REPORT_HOUR, minute=0, args=[application])
    scheduler.add_job(send_weekly_report, 'cron', day_of_week=WEEKLY_REPORT_DAY, hour=REPORT_HOUR, minute=5, args=[application]) # —â–æ—Ç–∏–∂–Ω–µ–≤–∏–π –∑–≤—ñ—Ç —á–µ—Ä–µ–∑ 5—Ö–≤
    scheduler.start()

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π —ñ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")
    application.run_polling()

if __name__ == "__main__":
    main()
